' UAN (Urgent Action Network) Reports Generator v1.0.0
' Last Updated: 2024-03-19
'
' REQUIREMENTS:
' - Excel 2010 or later recommended
'
' USAGE:
' Windows: Use the "Update UAN Reports" menu in the ribbon
' Mac: Use Command+U to show the reports menu
'
' REPORTS GENERATED:
' - by-name: Campaign ID counts with unique supporters
' - by-case-number: Case number engagement
' - by-country: Country-wise participation
' - by-topic: Topic-wise breakdown
' - by-year: Year-wise analysis
' - by-type: Type-based categorization
' - by-date: Monthly trends
' - by-supporter: Individual supporter engagement
'
' PERFORMANCE NOTES:
' - Uses arrays instead of ranges for better performance
' - Includes progress indicators for long operations
' - Handles large datasets efficiently
'
' ERROR HANDLING:
' - Validates all required columns
' - Handles date input validation
' - Provides user feedback for all operations
' - Graceful cleanup on errors

Option Explicit

' Column indices structure
Private Type ColumnIndices
    CampaignID As Long
    CampaignDate As Long
    SupporterID As Long
    CaseNumber As Long
    Country As Long
    Topic As Long
    Type As Long
    Year As Long
End Type

' Structure to track campaign-supporter relationships
Private Type UniqueTracker
    CampaignIDs() As String
    SupporterIDs() As String
    Count As Long
End Type

' ---------- MAIN REPORT GENERATOR ----------
Sub GenerateUANReports()
    ' Save Excel state
    Dim screenUpdating As Boolean
    Dim statusBar As Boolean
    Dim calculation As XlCalculation
    Dim displayAlerts As Boolean
    
    screenUpdating = Application.ScreenUpdating
    statusBar = Application.DisplayStatusBar
    calculation = Application.Calculation
    displayAlerts = Application.DisplayAlerts
    
    Application.ScreenUpdating = False
    Application.DisplayStatusBar = True
    Application.Calculation = xlCalculationManual
    Application.DisplayAlerts = False
    
    On Error GoTo ErrorHandler
    
    ' Get the export sheet
    Dim wsExport As Worksheet
    Set wsExport = GetExportSheet()
    
    If wsExport Is Nothing Then
        MsgBox "Could not find a sheet named 'export' or with campaign data.", vbExclamation
        GoTo Cleanup
    End If
    
    ' Find column indices
    Dim cols As ColumnIndices
    If Not FindColumnIndices(wsExport, cols) Then
        MsgBox "Could not find all required columns in the export sheet.", vbExclamation
        GoTo Cleanup
    End If
    
    ' Get date range from user
    Dim startDateInput As String, endDateInput As String
    Dim hasStartDate As Boolean, hasEndDate As Boolean
    Dim startDate As Date, endDate As Date
    
    startDateInput = InputBox("Enter Start Date (YYYY-MM-DD) or leave blank for no limit:", "Filter by Date Range", "")
    If startDateInput <> "" Then
        If IsDate(startDateInput) Then
            startDate = CDate(startDateInput)
            hasStartDate = True
        Else
            MsgBox "Invalid start date format. Please use YYYY-MM-DD format.", vbExclamation
            GoTo Cleanup
        End If
    End If
    
    endDateInput = InputBox("Enter End Date (YYYY-MM-DD) or leave blank for no limit:", "Filter by Date Range", "")
    If endDateInput <> "" Then
        If IsDate(endDateInput) Then
            endDate = CDate(endDateInput)
            hasEndDate = True
        Else
            MsgBox "Invalid end date format. Please use YYYY-MM-DD format.", vbExclamation
            GoTo Cleanup
        End If
    End If
    
    ' Create or get reporting sheets
    Application.StatusBar = "Creating report sheets..."
    
    Dim wsByName As Worksheet
    Set wsByName = CreateOrClearSheet("reporting-by-name")
    
    Dim wsByCaseNumber As Worksheet
    Set wsByCaseNumber = CreateOrClearSheet("reporting-by-case-number")
    
    Dim wsByCountry As Worksheet
    Set wsByCountry = CreateOrClearSheet("reporting-by-country")
    
    Dim wsByTopic As Worksheet
    Set wsByTopic = CreateOrClearSheet("reporting-by-topic")
    
    Dim wsByYear As Worksheet
    Set wsByYear = CreateOrClearSheet("reporting-by-year")
    
    Dim wsByType As Worksheet
    Set wsByType = CreateOrClearSheet("reporting-by-type")
    
    Dim wsByDate As Worksheet
    Set wsByDate = CreateOrClearSheet("reporting-by-date")
    
    Dim wsBySupporter As Worksheet
    Set wsBySupporter = CreateOrClearSheet("reporting-by-supporter")
    
    ' Initialize data arrays for each report
    Dim campaignIDs() As String
    Dim campaignCounts() As Integer
    Dim campaignUniqueSupport() As Integer
    Dim caseNumbers() As String
    Dim caseCounts() As Integer
    Dim countries() As String
    Dim countryCounts() As Integer
    Dim topics() As String
    Dim topicCounts() As Integer
    Dim years() As String
    Dim yearCounts() As Integer
    Dim types() As String
    Dim typeCounts() As Integer
    Dim dates() As String
    Dim dateCounts() As Integer
    Dim supporters() As String
    Dim supporterCounts() As Integer
    
    ' Initialize counters
    Dim totalCampaigns As Integer, totalCases As Integer, totalCountries As Integer
    Dim totalTopics As Integer, totalYears As Integer, totalTypes As Integer
    Dim totalDates As Integer, totalSupporters As Integer
    
    totalCampaigns = 0: totalCases = 0: totalCountries = 0
    totalTopics = 0: totalYears = 0: totalTypes = 0
    totalDates = 0: totalSupporters = 0
    
    ' Get data range
    Dim lastRow As Long
    lastRow = GetLastRow(wsExport, cols.CampaignID)
    
    ' Initialize the arrays
    ReDim campaignIDs(1 To 1)
    ReDim campaignCounts(1 To 1)
    ReDim campaignUniqueSupport(1 To 1)
    ReDim caseNumbers(1 To 1)
    ReDim caseCounts(1 To 1)
    ReDim countries(1 To 1)
    ReDim countryCounts(1 To 1)
    ReDim topics(1 To 1)
    ReDim topicCounts(1 To 1)
    ReDim years(1 To 1)
    ReDim yearCounts(1 To 1)
    ReDim types(1 To 1)
    ReDim typeCounts(1 To 1)
    ReDim dates(1 To 1)
    ReDim dateCounts(1 To 1)
    ReDim supporters(1 To 1)
    ReDim supporterCounts(1 To 1)
    
    ' For tracking unique supporters per campaign
    Dim campaignSupporters() As String
    Dim campaignSupporter As String
    Dim uniqueCampaigns() As String
    Dim uniqueCampaignCount As Integer
    ReDim campaignSupporters(1 To 10000)
    ReDim uniqueCampaigns(1 To 1000)
    uniqueCampaignCount = 0
    
    ' Process data
    Application.StatusBar = "Processing data: 0%"
    Dim row As Long, i As Long
    Dim supporterID As String, campaignID As String, caseNumber As String
    Dim country As String, topic As String, typeValue As String, yearValue As String
    Dim campaignDate As Date, monthYear As String
    
    Dim progress As Double
    Dim campaignSupporterCount As Long
    campaignSupporterCount = 0
    
    For row = 2 To lastRow
        ' Show progress
        progress = (row - 1) / (lastRow - 1) * 100
        If row Mod 100 = 0 Then
            Application.StatusBar = "Processing data: " & Format(progress, "0") & "%"
        End If
        
        ' Get campaign date with error handling
        On Error Resume Next
        If IsDate(wsExport.Cells(row, cols.CampaignDate).Value) Then
            campaignDate = CDate(wsExport.Cells(row, cols.CampaignDate).Value)
        Else
            campaignDate = 0
        End If
        On Error GoTo 0
        
        ' Skip rows without valid dates or if outside date range
        If campaignDate = 0 Then GoTo NextRow
        If hasStartDate And campaignDate < startDate Then GoTo NextRow
        If hasEndDate And campaignDate > endDate Then GoTo NextRow
        
        ' Get all field values with safe handling
        On Error Resume Next
        campaignID = SafeGetCellValue(wsExport, row, cols.CampaignID)
        supporterID = SafeGetCellValue(wsExport, row, cols.SupporterID)
        
        ' Skip if missing essential data
        If campaignID = "" Or supporterID = "" Then GoTo NextRow
        
        ' Record campaign-supporter pair for unique counting
        campaignSupporterCount = campaignSupporterCount + 1
        If campaignSupporterCount > UBound(campaignSupporters) Then
            ReDim Preserve campaignSupporters(1 To UBound(campaignSupporters) * 2)
        End If
        campaignSupporters(campaignSupporterCount) = campaignID & "|" & supporterID
        
        ' Format date as YYYY-MM
        monthYear = Format(campaignDate, "yyyy-mm")
        
        ' Get optional fields with safe handling
        caseNumber = SafeGetCellValue(wsExport, row, cols.CaseNumber)
        country = SafeGetCellValue(wsExport, row, cols.Country)
        topic = SafeGetCellValue(wsExport, row, cols.Topic)
        typeValue = SafeGetCellValue(wsExport, row, cols.Type)
        yearValue = SafeGetCellValue(wsExport, row, cols.Year)
        On Error GoTo 0
        
        ' Count occurrences
        totalCampaigns = CountOccurrences(campaignIDs, campaignCounts, totalCampaigns, campaignID)
        totalSupporters = CountOccurrences(supporters, supporterCounts, totalSupporters, supporterID)
        totalDates = CountOccurrences(dates, dateCounts, totalDates, monthYear)
        
        If caseNumber <> "" Then totalCases = CountOccurrences(caseNumbers, caseCounts, totalCases, caseNumber)
        If country <> "" Then totalCountries = CountOccurrences(countries, countryCounts, totalCountries, country)
        If topic <> "" Then totalTopics = CountOccurrences(topics, topicCounts, totalTopics, topic)
        If typeValue <> "" Then totalTypes = CountOccurrences(types, typeCounts, totalTypes, typeValue)
        If yearValue <> "" Then totalYears = CountOccurrences(years, yearCounts, totalYears, yearValue)
        
        ' Track unique campaigns
        Dim foundCampaign As Boolean
        foundCampaign = False
        For i = 1 To uniqueCampaignCount
            If uniqueCampaigns(i) = campaignID Then
                foundCampaign = True
                Exit For
            End If
        Next i
        
        If Not foundCampaign Then
            uniqueCampaignCount = uniqueCampaignCount + 1
            If uniqueCampaignCount > UBound(uniqueCampaigns) Then
                ReDim Preserve uniqueCampaigns(1 To UBound(uniqueCampaigns) * 2)
            End If
            uniqueCampaigns(uniqueCampaignCount) = campaignID
        End If
        
NextRow:
    Next row
    
    ' Calculate unique supporters per campaign
    Application.StatusBar = "Calculating unique supporters..."
    If uniqueCampaignCount > 0 Then
        ReDim campaignUniqueSupport(1 To totalCampaigns)
        
        For i = 1 To totalCampaigns
            Dim campaign As String
            campaign = campaignIDs(i)
            
            Dim uniqueCount As Integer
            uniqueCount = CountUniqueSupporters(campaignSupporters, campaignSupporterCount, campaign)
            
            campaignUniqueSupport(i) = uniqueCount
        Next i
    End If
    
    ' Write reports
    Application.StatusBar = "Writing reports..."
    
    If totalCampaigns > 0 Then
        WriteReportWithUniques wsByName, "Campaign ID", "Total Actions", "Unique Supporters", _
                              campaignIDs, campaignCounts, campaignUniqueSupport, totalCampaigns
        SortReportSheet wsByName
    End If
    
    If totalCases > 0 Then
        WriteReport wsByCaseNumber, "Case Number", "Count", caseNumbers, caseCounts, totalCases
        SortReportSheet wsByCaseNumber
    End If
    
    If totalCountries > 0 Then
        WriteReport wsByCountry, "Country", "Count", countries, countryCounts, totalCountries
        SortReportSheet wsByCountry
    End If
    
    If totalTopics > 0 Then
        WriteReport wsByTopic, "Topic", "Count", topics, topicCounts, totalTopics
        SortReportSheet wsByTopic
    End If
    
    If totalYears > 0 Then
        WriteReport wsByYear, "Year", "Count", years, yearCounts, totalYears
        SortReportSheet wsByYear
    End If
    
    If totalTypes > 0 Then
        WriteReport wsByType, "Type", "Count", types, typeCounts, totalTypes
        SortReportSheet wsByType
    End If
    
    If totalDates > 0 Then
        WriteReport wsByDate, "Month", "Count", dates, dateCounts, totalDates
        SortReportSheet wsByDate
    End If
    
    If totalSupporters > 0 Then
        WriteReport wsBySupporter, "Supporter ID", "Count", supporters, supporterCounts, totalSupporters
        SortReportSheet wsBySupporter
    End If
    
    MsgBox "UAN Reports have been generated successfully!", vbInformation
    
    GoTo Cleanup
    
ErrorHandler:
    MsgBox "An error occurred: " & Err.Description, vbCritical
    
Cleanup:
    ' Restore Excel state
    Application.StatusBar = False
    Application.ScreenUpdating = screenUpdating
    Application.DisplayStatusBar = statusBar
    Application.Calculation = calculation
    Application.DisplayAlerts = displayAlerts
End Sub

' Safely get cell value with error handling
Private Function SafeGetCellValue(ws As Worksheet, row As Long, col As Long) As String
    SafeGetCellValue = ""
    
    If ws Is Nothing Then Exit Function
    If row < 1 Or col < 1 Then Exit Function
    
    On Error Resume Next
    SafeGetCellValue = Trim(CStr(ws.Cells(row, col).Value))
    On Error GoTo 0
End Function

' Count unique supporters for a campaign
Private Function CountUniqueSupporters(campaignSupporters() As String, totalPairs As Long, campaign As String) As Integer
    Dim uniqueSupporters() As String
    ReDim uniqueSupporters(1 To 1000)
    Dim uniqueCount As Integer
    uniqueCount = 0
    
    Dim i As Long
    Dim pair As String
    Dim parts() As String
    
    For i = 1 To totalPairs
        pair = campaignSupporters(i)
        If pair <> "" Then
            parts = Split(pair, "|")
            If UBound(parts) >= 1 Then
                If parts(0) = campaign Then
                    Dim supporter As String
                    supporter = parts(1)
                    
                    ' Check if supporter already counted
                    Dim found As Boolean
                    found = False
                    Dim j As Integer
                    
                    For j = 1 To uniqueCount
                        If uniqueSupporters(j) = supporter Then
                            found = True
                            Exit For
                        End If
                    Next j
                    
                    If Not found Then
                        uniqueCount = uniqueCount + 1
                        If uniqueCount > UBound(uniqueSupporters) Then
                            ReDim Preserve uniqueSupporters(1 To UBound(uniqueSupporters) * 2)
                        End If
                        uniqueSupporters(uniqueCount) = supporter
                    End If
                End If
            End If
        End If
    Next i
    
    CountUniqueSupporters = uniqueCount
End Function

' Get last row for a column
Private Function GetLastRow(ws As Worksheet, col As Long) As Long
    On Error Resume Next
    GetLastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
    If Err.Number <> 0 Or GetLastRow < 1 Then GetLastRow = 1
    On Error GoTo 0
End Function

' Get the export sheet
Private Function GetExportSheet() As Worksheet
    On Error Resume Next
    Set GetExportSheet = ThisWorkbook.Sheets("export")
    On Error GoTo 0
    
    If GetExportSheet Is Nothing Then
        ' Try to find a sheet with campaign data
        Dim ws As Worksheet
        For Each ws In ThisWorkbook.Sheets
            If FindCellInHeader(ws, "Campaign ID") > 0 And FindCellInHeader(ws, "Campaign Date") > 0 Then
                Set GetExportSheet = ws
                Exit Function
            End If
        Next ws
    End If
End Function

' Find column indices
Private Function FindColumnIndices(ws As Worksheet, ByRef cols As ColumnIndices) As Boolean
    cols.CampaignID = FindCellInHeader(ws, "Campaign ID")
    cols.CampaignDate = FindCellInHeader(ws, "Campaign Date")
    cols.SupporterID = FindCellInHeader(ws, "Supporter ID")
    cols.CaseNumber = FindCellInHeader(ws, "Case Number")
    cols.Country = FindCellInHeader(ws, "Country")
    cols.Topic = FindCellInHeader(ws, "Topic")
    cols.Type = FindCellInHeader(ws, "Type")
    cols.Year = FindCellInHeader(ws, "Year")
    
    ' Essential columns must exist
    FindColumnIndices = (cols.CampaignID > 0 And cols.CampaignDate > 0 And cols.SupporterID > 0)
End Function

' Find a cell in the header row
Private Function FindCellInHeader(ws As Worksheet, headerText As String) As Long
    FindCellInHeader = 0
    
    If ws Is Nothing Then Exit Function
    
    On Error Resume Next
    Dim col As Long
    Dim lastCol As Long
    
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    For col = 1 To lastCol
        If Trim(ws.Cells(1, col).Value) = headerText Then
            FindCellInHeader = col
            Exit Function
        End If
    Next col
    On Error GoTo 0
End Function

' Create or clear a sheet
Private Function CreateOrClearSheet(sheetName As String) As Worksheet
    On Error Resume Next
    Set CreateOrClearSheet = ThisWorkbook.Sheets(sheetName)
    On Error GoTo 0
    
    If CreateOrClearSheet Is Nothing Then
        ' Sheet doesn't exist, create it
        Set CreateOrClearSheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        CreateOrClearSheet.Name = sheetName
    Else
        ' Sheet exists, clear it
        CreateOrClearSheet.Cells.Clear
    End If
End Function

' Count occurrences of a value in an array
Private Function CountOccurrences(ByRef keys() As String, ByRef counts() As Integer, ByVal total As Integer, ByVal key As String) As Integer
    Dim i As Integer
    
    ' If first item, initialize arrays
    If total = 0 Then
        ReDim keys(1 To 1)
        ReDim counts(1 To 1)
        keys(1) = key
        counts(1) = 1
        CountOccurrences = 1
        Exit Function
    End If
    
    ' Check if key exists
    For i = 1 To total
        If keys(i) = key Then
            counts(i) = counts(i) + 1
            CountOccurrences = total
            Exit Function
        End If
    Next i
    
    ' Key not found, add it
    total = total + 1
    ReDim Preserve keys(1 To total)
    ReDim Preserve counts(1 To total)
    keys(total) = key
    counts(total) = 1
    CountOccurrences = total
End Function

' Write report data to worksheet
Private Sub WriteReport(ws As Worksheet, col1Header As String, col2Header As String, keys() As String, counts() As Integer, total As Integer)
    ' Check parameters
    If ws Is Nothing Then Exit Sub
    If total <= 0 Then Exit Sub
    
    ' Write headers
    ws.Cells(1, 1).Value = col1Header
    ws.Cells(1, 2).Value = col2Header
    
    ' Format headers
    ws.Cells(1, 1).Font.Bold = True
    ws.Cells(1, 2).Font.Bold = True
    
    ' Write data
    Dim row As Long
    row = 2
    
    Dim i As Integer
    For i = 1 To total
        ws.Cells(row, 1).Value = keys(i)
        ws.Cells(row, 2).Value = counts(i)
        row = row + 1
    Next i
    
    ' Auto-fit columns
    ws.Columns("A:B").AutoFit
End Sub

' Write report with unique supporters
Private Sub WriteReportWithUniques(ws As Worksheet, col1Header As String, col2Header As String, col3Header As String, _
                                 keys() As String, counts() As Integer, uniques() As Integer, total As Integer)
    ' Check parameters
    If ws Is Nothing Then Exit Sub
    If total <= 0 Then Exit Sub
    
    ' Write headers
    ws.Cells(1, 1).Value = col1Header
    ws.Cells(1, 2).Value = col2Header
    ws.Cells(1, 3).Value = col3Header
    
    ' Format headers
    ws.Cells(1, 1).Font.Bold = True
    ws.Cells(1, 2).Font.Bold = True
    ws.Cells(1, 3).Font.Bold = True
    
    ' Write data
    Dim row As Long
    row = 2
    
    Dim i As Integer
    For i = 1 To total
        ws.Cells(row, 1).Value = keys(i)
        ws.Cells(row, 2).Value = counts(i)
        ws.Cells(row, 3).Value = uniques(i)
        row = row + 1
    Next i
    
    ' Auto-fit columns
    ws.Columns("A:C").AutoFit
End Sub

' Sort a report sheet
Private Sub SortReportSheet(ws As Worksheet)
    If ws Is Nothing Then Exit Sub
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    
    If lastRow <= 1 Then Exit Sub
    
    On Error Resume Next
    With ws.Sort
        .SortFields.Clear
        .SortFields.Add Key:=ws.Range("A2:A" & lastRow), SortOn:=xlSortOnValues, Order:=xlAscending
        .SetRange ws.Range("A1").CurrentRegion
        .Header = xlYes
        .Apply
    End With
    On Error GoTo 0
End Sub
